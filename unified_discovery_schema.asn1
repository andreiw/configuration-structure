-- RISC-V Unified Discovery ASN.1 schema
--
-- Please refer to the RISC-V Unified Discovery Specification
-- for details and background.

RISCV-Unified-Discovery DEFINITIONS AUTOMATIC TAGS ::=
BEGIN
IMPORTS
  SignedData
  FROM CryptographicMessageSyntax-2010
    { iso(1) member-body(2) us(840) rsadsi(113549)
          pkcs(1) pkcs-9(9) smime(16) modules(0) id-mod-cms-2009(58) };

  -- Each Unified Discovery message is wrapped in CMS (Cryptographic
  -- Message Syntax) SignedData envelope to provide support for
  -- message authentication.  Signing of the message is optional.
  -- Cf. Unified Discovery specification, section [TODO: 1.x].
  UnifiedDiscoveryEnvelope ::= SignedData

  -- The content type in CMS is encoded as an object identifier.
  -- Unified Discovery specifies two such content types:
  --  1. UPER-encoded U/D  (cf. section [TODO])
  --  2. DER-encoded U/D   (cf. section [TODO])
  id-UnifiedDiscovery-UPERencoded OBJECT IDENTIFIER ::= {
         iso(1) identified-organization(3) dod(6) internet(1)
	 private(4) enterprise(1) 57194
	 unified-discovery(1) uper-encoded-content(2) }
  id-UnifiedDiscovery-DERencoded OBJECT IDENTIFIER ::= {
         iso(1) identified-organization(3) dod(6) internet(1)
	 private(4) enterprise(1) 57194
	 unified-discovery(1) uper-encoded-content(1) }

  -- RISC-V sometimes uses JEDEC manufacturers identification code to
  -- identify implementers.  Each JEDEC manufacturers identification
  -- code (see JEDEC JEP106) is made up of one or more 8 bit fields
  -- (each consisting of 7 data bits plus 1 parity bit).
  -- While a representation of { bank, id } would allow a more compact
  -- encoding for identifiers from the higher banks, JEP106 states
  -- that "multiple continuation fields (i.e., byte values '0x7f') are
  -- permitted and, when used, shall comprise part of the
  -- identification code".
  -- Accordingly, the Unified Discovery Specification encodes the
  -- JEDEC identifier as an unbounded integer. 
  -- Cf. Unified Discovery specification, section [TODO 3.x]
  JEDEC-ID ::= INTEGER

  -- Unified Discovery allows for the inclusion of vendor-specific
  -- blobs.  These are designed to provide a content type and a
  -- variable-length binary payload, so they can be safely
  -- skipped-over by parsers without support for specific content.
  DiscoveryAdditonalData ::= SEQUENCE
  {
    -- Unified Discovery supports three different contentType
    -- identifier formats:
    --  1. OID: An OID can identify the content, providing a globally
    --          unique identification, allowing the lookup of the
    --          specification's originator and the determination of
    --          the content's encoding and intended usage.
    --  2. URL: A URL into the specification originator's namespace
    --          will point to a (human-readable or machine-readable)
    --          specification document.  The Unified Discovery
    --          Specification does not prescribe a specific protocol
    --          or format for the URL, although it is expected that
    --          typical usage will see a https-protocol pointing to a
    --          permanent location flor either a plain-text or PDF
    --          file in the originating company's namespace.
    --  3. Numeric:
    --          A JEDEC manufacturers identification code will
    --          identify the originator and an integer (assigned by
    --          the originator) identifies the payload format and
    --          purpose.
    contentType CHOICE {
    	oid 	[0] OBJECT IDENTIFIER,
	url	[1] UTF8String,
	numeric [2] SEQUENCE {
	  manufacturer   JEDEC-ID,
	  identifier	 INTEGER
	}
    },
    payload	OCTET STRING
  }

  -- Unified Discovery supports a standardised mechanism for exposing
  -- errata information to software and users.
  -- All errata are identified through an OID to support decentralized
  -- issuance of errata without a centralized registry.  Issuers of
  -- errata bulletings are encouraged to supply an (optional) URL to a
  -- human-readable document (either PDF or plain-text) that provides
  -- detailled information.
  DiscoveryErrata ::= SEQUENCE
  {
    oid		OBJECT IDENTIFIER,
    url		UTF8String OPTIONAL
  }


  RVVConfig ::= SEQUENCE {
    vlen    	BIT STRING {
    		    vlen128(0),
		    vlen256(1),
		    vlen512(2),
		    vlen1024(3) }
  }

  -- Unified Discovery Data (per-hart), as pointed to by the mconfig CSR
  DiscoveryData ::= SEQUENCE
  {
    version	INTEGER,
    ...,
    -- list of ratified extension as of 2023-10-27
    c     SEQUENCE { } OPTIONAL,
    d     SEQUENCE { } OPTIONAL,
    f     SEQUENCE { } OPTIONAL,
    h     SEQUENCE { } OPTIONAL,
    m     SEQUENCE { } OPTIONAL,
    n     SEQUENCE { } OPTIONAL,
    q     SEQUENCE { } OPTIONAL,
    p     SEQUENCE { } OPTIONAL,
    sdext     SEQUENCE { } OPTIONAL,
    sdtrig     SEQUENCE { } OPTIONAL,
    shcounterenw     SEQUENCE { } OPTIONAL,
    shgatpa     SEQUENCE { } OPTIONAL,
    shtvala     SEQUENCE { } OPTIONAL,
    shvsatpa     SEQUENCE { } OPTIONAL,
    shvstvala     SEQUENCE { } OPTIONAL,
    shvstvecd     SEQUENCE { } OPTIONAL,
    sm1p11     SEQUENCE { } OPTIONAL,
    sm1p12     SEQUENCE { } OPTIONAL,
    sm1p13     SEQUENCE { } OPTIONAL,
    smaia     SEQUENCE { } OPTIONAL,
    smclic     SEQUENCE { } OPTIONAL,
    smcdeleg     SEQUENCE { } OPTIONAL,
    smcntrpmf     SEQUENCE { } OPTIONAL,
    smcsrind     SEQUENCE { } OPTIONAL,
    smepmp     SEQUENCE { } OPTIONAL,
    smrnmi     SEQUENCE { } OPTIONAL,
    smmpm     SEQUENCE { } OPTIONAL,
    smrntt     SEQUENCE { } OPTIONAL,
    smnpm     SEQUENCE { } OPTIONAL,
    smstateen     SEQUENCE { } OPTIONAL,
    ss1p11     SEQUENCE { } OPTIONAL,
    ss1p12     SEQUENCE { } OPTIONAL,
    ss1p13     SEQUENCE { } OPTIONAL,
    ssaia     SEQUENCE { } OPTIONAL,
    ssccfg     SEQUENCE { } OPTIONAL,
    ssccptr     SEQUENCE { } OPTIONAL,
    sscofpmf     SEQUENCE { } OPTIONAL,
    sscounterenw     SEQUENCE { } OPTIONAL,
    sscsrind     SEQUENCE { } OPTIONAL,
    ssdtso     SEQUENCE { } OPTIONAL,
    ssnpm     SEQUENCE { } OPTIONAL,
    ssstateeen     SEQUENCE { } OPTIONAL,
    sstc     SEQUENCE { } OPTIONAL,
    sstvala     SEQUENCE { } OPTIONAL,
    sstvecd     SEQUENCE { } OPTIONAL,
    sstvecv     SEQUENCE { } OPTIONAL,
    ssu32xl     SEQUENCE { } OPTIONAL,
    ssu64xl     SEQUENCE { } OPTIONAL,
    ssube     SEQUENCE { } OPTIONAL,
    sv32     SEQUENCE { } OPTIONAL,
    sv39     SEQUENCE { } OPTIONAL,
    sv48     SEQUENCE { } OPTIONAL,
    sv57     SEQUENCE { } OPTIONAL,
    svade     SEQUENCE { } OPTIONAL,
    svadu     SEQUENCE { } OPTIONAL,
    svbare     SEQUENCE { } OPTIONAL,
    svinval     SEQUENCE { } OPTIONAL,
    svnapot     SEQUENCE { } OPTIONAL,
    svpbmt     SEQUENCE { } OPTIONAL,
    rvv         RVVConfig OPTIONAL,
    za128rs     SEQUENCE { } OPTIONAL,
    za64rs     SEQUENCE { } OPTIONAL,
    zaamo     SEQUENCE { } OPTIONAL,
    zacas     SEQUENCE { } OPTIONAL,
    zalrsc     SEQUENCE { } OPTIONAL,
    zawrs     SEQUENCE { } OPTIONAL,
    zba     SEQUENCE { } OPTIONAL,
    zbb     SEQUENCE { } OPTIONAL,
    zbc     SEQUENCE { } OPTIONAL,
    zbkb     SEQUENCE { } OPTIONAL,
    zbkc     SEQUENCE { } OPTIONAL,
    zbkx     SEQUENCE { } OPTIONAL,
    zbs     SEQUENCE { } OPTIONAL,
    zca     SEQUENCE { } OPTIONAL,
    zcb     SEQUENCE { } OPTIONAL,
    zcd     SEQUENCE { } OPTIONAL,
    zcf     SEQUENCE { } OPTIONAL,
    zcmp     SEQUENCE { } OPTIONAL,
    zcmt     SEQUENCE { } OPTIONAL,
    zdinx     SEQUENCE { } OPTIONAL,
    zfa     SEQUENCE { } OPTIONAL,
    zfbfmin     SEQUENCE { } OPTIONAL,
    zfh     SEQUENCE { } OPTIONAL,
    zfhmin     SEQUENCE { } OPTIONAL,
    zfinx     SEQUENCE { } OPTIONAL,
    zhinx     SEQUENCE { } OPTIONAL,
    zhinxmin     SEQUENCE { } OPTIONAL,
    zic64b     SEQUENCE { } OPTIONAL,
    zicbom     SEQUENCE { } OPTIONAL,
    zicbop     SEQUENCE { } OPTIONAL,
    zicboz     SEQUENCE { } OPTIONAL,
    ziccamoa     SEQUENCE { } OPTIONAL,
    ziccif     SEQUENCE { } OPTIONAL,
    zicclsm     SEQUENCE { } OPTIONAL,
    ziccrse     SEQUENCE { } OPTIONAL,
    zicntr     SEQUENCE { } OPTIONAL,
    zicond     SEQUENCE { } OPTIONAL,
    zicsr     SEQUENCE { } OPTIONAL,
    zifencei     SEQUENCE { } OPTIONAL,
    zihintntl     SEQUENCE { } OPTIONAL,
    zihintpause     SEQUENCE { } OPTIONAL,
    zihpm     SEQUENCE { } OPTIONAL,
    zimop     SEQUENCE { } OPTIONAL,
    zjid     SEQUENCE { } OPTIONAL,
    zk     SEQUENCE { } OPTIONAL,
    zkn     SEQUENCE { } OPTIONAL,
    zknd     SEQUENCE { } OPTIONAL,
    zkne     SEQUENCE { } OPTIONAL,
    zknh     SEQUENCE { } OPTIONAL,
    zkr     SEQUENCE { } OPTIONAL,
    zks     SEQUENCE { } OPTIONAL,
    zksed     SEQUENCE { } OPTIONAL,
    zksh     SEQUENCE { } OPTIONAL,
    zkt     SEQUENCE { } OPTIONAL,
    zmmul     SEQUENCE { } OPTIONAL,
    ztso     SEQUENCE { } OPTIONAL,
    zvbb     SEQUENCE { } OPTIONAL,
    zvbc     SEQUENCE { } OPTIONAL,
    zve32d     SEQUENCE { } OPTIONAL,
    zve32f     SEQUENCE { } OPTIONAL,
    zve32x     SEQUENCE { } OPTIONAL,
    zve64d     SEQUENCE { } OPTIONAL,
    zve64f     SEQUENCE { } OPTIONAL,
    zve64x     SEQUENCE { } OPTIONAL,
    zvf     SEQUENCE { } OPTIONAL,
    zvfbfmin     SEQUENCE { } OPTIONAL,
    zvfbfwma     SEQUENCE { } OPTIONAL,
    zvfh     SEQUENCE { } OPTIONAL,
    zvfhmin     SEQUENCE { } OPTIONAL,
    zvk     SEQUENCE { } OPTIONAL,
    zvkb     SEQUENCE { } OPTIONAL,
    zvkg     SEQUENCE { } OPTIONAL,
    zvkn     SEQUENCE { } OPTIONAL,
    zvknc     SEQUENCE { } OPTIONAL,
    zvkned     SEQUENCE { } OPTIONAL,
    zvkng     SEQUENCE { } OPTIONAL,
    zvknha     SEQUENCE { } OPTIONAL,
    zvknhb     SEQUENCE { } OPTIONAL,
    zvks     SEQUENCE { } OPTIONAL,
    zvksc     SEQUENCE { } OPTIONAL,
    zvksed     SEQUENCE { } OPTIONAL,
    zvksg     SEQUENCE { } OPTIONAL,
    zvksh     SEQUENCE { } OPTIONAL,
    zvkt     SEQUENCE { } OPTIONAL,
    ...,
    errata	SEQUENCE OF DiscoveryErrata OPTIONAL,
    ext		SEQUENCE OF DiscoveryAdditonalData OPTIONAL
  }
END
